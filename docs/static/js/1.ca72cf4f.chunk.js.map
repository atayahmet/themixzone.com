{"version":3,"sources":["pages/series/ListPage.tsx","hocs/series/ListHoc.tsx"],"names":["SeriesList","_super","props","_this","call","this","state","__WEBPACK_IMPORTED_MODULE_0_tslib__","prototype","componentDidMount","setState","artists","reduce","result","artist","id","__WEBPACK_IMPORTED_MODULE_15__music_services_gaService__","pageView","render","__WEBPACK_IMPORTED_MODULE_1_react__","__WEBPACK_IMPORTED_MODULE_14_react_sizeme__","_a","size","__WEBPACK_IMPORTED_MODULE_4__layouts_Sidebar__","__WEBPACK_IMPORTED_MODULE_5_semantic_ui_react__","style","height","className","as","Group","series","map","s","fluid","width","centered","key","link","onClick","go","src","Object","__WEBPACK_IMPORTED_MODULE_7__music_config__","slug","Content","Header","name","Meta","__WEBPACK_IMPORTED_MODULE_9__music_utils__","artistId","Description","about","extra","play","count","history","push","__WEBPACK_IMPORTED_MODULE_8__music_models__","newInstance","url","mix","__WEBPACK_IMPORTED_MODULE_11__filters__","container","seriesId","SeriesListPage","__WEBPACK_IMPORTED_MODULE_2_react_redux__","data","mixContainer","slice","dispatch","setMainMix","__WEBPACK_IMPORTED_MODULE_12__music_actions_player__","prepareMix","addToContainer","cb","__WEBPACK_IMPORTED_MODULE_13__music_actions_mix__","addGenresIfNotExists","__WEBPACK_IMPORTED_MODULE_3_react_router_dom__","__WEBPACK_IMPORTED_MODULE_10__music_hocs_QuickPlayHoc__","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_6__music_hocs_series_ListHoc__","WrappedComponent","class_1"],"mappings":"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","file":"static/js/1.ca72cf4f.chunk.js","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport SidebarComponent from '../../layouts/Sidebar';\nimport { Segment, Card, Image, Icon, Header } from 'semantic-ui-react';\nimport SeriesListHoc from '@music/hocs/series/ListHoc';\nimport { IState, ISeries, IRouteProps, IMix, MainMixType } from '../../interfaces';\nimport config from '@music/config';\nimport { seriesModel } from '@music/models';\nimport { get } from '@music/utils';\nimport QuickPlayHoc, { IQuickPlayHoc } from '@music/hocs/QuickPlayHoc';\nimport { findOne } from '../../filters';\nimport { setMainMix } from '@music/actions/player';\nimport { prepareMix, addGenresIfNotExists } from '@music/actions/mix';\nimport { SizeMe } from 'react-sizeme';\nimport gaService from '@music/_services/gaService';\nimport { IArtist, IKeyValueObject } from '@music/interfaces';\n\ninterface ISeriesListProps extends IRouteProps, IQuickPlayHoc {\n  series: ISeries[];\n  artists: IArtist[];\n  container: IMix[];\n}\n\nclass SeriesList extends React.Component<ISeriesListProps, IKeyValueObject> {\n\n  constructor(props: ISeriesListProps) {\n    super(props);\n    this.state = {};\n  }\n\n  public componentDidMount() {\n    this.setState((state: IKeyValueObject) => {\n        const artists = this.props.artists.reduce((result: any, artist: any) => {\n          result[artist.id] = artist;\n          return result;\n        }, {})\n        return {...state, artists};\n      }, () => gaService.pageView(`Series List`)\n    )\n  }\n\n  public render() {\n    const { artists } = this.state;\n    return !artists ? null : (\n      <>\n      <SizeMe>\n        {({ size }) => (\n        <SidebarComponent>\n          <Segment style={{height: 'auto'}} className=\"toptracks-container\">\n            <Header as='h1'>Series</Header>\n            <Card.Group>\n            {this.props.series.map(s => (\n              <Card fluid={!((size.width || 0) > 603)} centered={!((size.width || 0) > 603)} key={s.id} link>\n                <Image onClick={this.go(s)} src={config(`images.${s.slug}.300x300`)} />\n                <Card.Content onClick={this.go(s)}>\n                  <Card.Header>{s.name}</Card.Header>\n                  <Card.Meta>\n                    by <strong className='date'>{get(`${s.artistId}.name`, artists)}</strong>\n                  </Card.Meta>\n                  <Card.Description>{s.about}</Card.Description>\n                </Card.Content>\n                <Card.Content extra onClick={this.play(s, s.count)}>\n                  <Icon name='play' />\n                  Listen the {' '}\n                  <strong>\n                    {s.name} #{s.count}\n                  </strong>\n                </Card.Content>\n              </Card>\n            ))}\n            </Card.Group>\n          </Segment>\n        </SidebarComponent>\n        )}\n        </SizeMe>\n      </>\n    );\n  }\n\n  private go(series: ISeries): () => any {\n    return () => {\n      this.props.history.push(seriesModel.newInstance(series).url());\n    }\n  }\n\n  private play(s: ISeries, count: number) {\n    return () => {\n      const { id } = s;\n      const mix = findOne(this.props.container, {seriesId: id, count});\n\n      if (mix) {\n        this.props.play(mix as IMix);\n      }\n    }\n  };\n}\n\nconst mapDispatchToProps = (dispatch: CallableFunction) => {\n  return {\n    setMainMix: (mix: MainMixType) => dispatch(setMainMix({...mix})),\n    prepareMix: (mix: IMix, addToContainer: boolean, cb: (mix: IMix) => any) => dispatch(prepareMix(mix, addToContainer, cb)),\n    addGenresIfNotExists: (mix: IMix,) => dispatch(addGenresIfNotExists(mix))\n  }\n};\n\nconst mapStateToProps = (state: IState) => {\n  return {\n    series: state.series.data,\n    artists: state.artists.data,\n    container: [...state.mixContainer.data]\n  }\n};\n\nconst SeriesListPage = connect(mapStateToProps, mapDispatchToProps)(withRouter(QuickPlayHoc(SeriesList) as any));\n\nexport default SeriesListHoc(SeriesListPage);\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/series/ListPage.tsx","import * as React from 'react';\n\nexport default function SeriesListHoc(WrappedComponent: any) {\n  return class extends React.Component<any, any> {\n    constructor(props: any) {\n      super(props);\n      this.state = {};\n    }\n\n    public async componentDidMount() {\n\n    }\n\n    public render() {\n      return (\n        <WrappedComponent />\n      );\n    }\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/hocs/series/ListHoc.tsx"],"sourceRoot":""}