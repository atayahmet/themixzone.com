{"version":3,"sources":["pages/mix/DetailPage.tsx","hocs/mix/DetailHoc.tsx","components/stateless/PlayButtonVar2.tsx"],"names":["MixDetail","_super","props","_this","call","this","state","currentSeries","mix","__WEBPACK_IMPORTED_MODULE_0_tslib__","Object","defineProperty","prototype","__WEBPACK_IMPORTED_MODULE_9__music_extensions_entity_collection__","container","currentTrack","__WEBPACK_IMPORTED_MODULE_5__music_utils__","current","componentDidMount","_a","match","params","slug","count","series","find","setState","__WEBPACK_IMPORTED_MODULE_13__music_services_gaService__","pageView","name","componentDidUpdate","where","seriesId","id","parseInt","first","prepareMix","prepared","render","__WEBPACK_IMPORTED_MODULE_1_react__","__WEBPACK_IMPORTED_MODULE_7__layouts_Sidebar__","__WEBPACK_IMPORTED_MODULE_3_semantic_ui_react__","style","backgroundImage","cover","height","className","basic","as","description","__WEBPACK_IMPORTED_MODULE_14__music_components_stateless_GenreLabel__","genres","mixGenres","labelProps","size","__WEBPACK_IMPORTED_MODULE_12__music_components_stateless_PlayButtonVar2__","play","pause","player","playing","__WEBPACK_IMPORTED_MODULE_15__music_components_SoundWaves__","active","trackName","length","orderNumber","cues","__WEBPACK_IMPORTED_MODULE_10__music_components_stateless_TrackListBody__","isPlaying","MixDetailPage","__WEBPACK_IMPORTED_MODULE_4_react_router_dom__","__WEBPACK_IMPORTED_MODULE_2_react_redux__","mixContainer","data","slice","keys","undefined","dispatch","setMainMix","__WEBPACK_IMPORTED_MODULE_11__music_actions_player__","addToContainer","cb","__WEBPACK_IMPORTED_MODULE_6__music_actions_mix__","__WEBPACK_IMPORTED_MODULE_8__music_hocs_mix_DetailHoc__","__webpack_exports__","WrappedComponent","class_1","__WEBPACK_IMPORTED_MODULE_0_react__","__webpack_require__","__WEBPACK_IMPORTED_MODULE_1_semantic_ui_react__","n","__WEBPACK_IMPORTED_MODULE_2__hocs_PlayButtonHoc__","__WEBPACK_IMPORTED_MODULE_3__music_hocs_QuickPlayHoc__","setPlayerState","isLoading","isSame","inline","circular","icon","onClick"],"mappings":"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","file":"static/js/0.dab2fa2b.chunk.js","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Segment, Header, Container } from 'semantic-ui-react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { has, isMobile, get } from '@music/utils';\nimport { prepareMix } from '@music/actions/mix';\nimport SidebarComponent from '../../layouts/Sidebar';\nimport MixDetailHoc from '@music/hocs/mix/DetailHoc';\nimport EntityCollection from '@music/extensions/entity-collection';\nimport TrackListBody from '@music/components/stateless/TrackListBody';\nimport { IState, IKeyValueObject, ISeries, IMix, ITrackCue, MainMixType, IGenre } from '@music/interfaces';\nimport { setMainMix } from '@music/actions/player';\nimport { IQuickPlayHoc } from '@music/hocs/QuickPlayHoc';\nimport PlayButton from '@music/components/stateless/PlayButtonVar2';\nimport gaService from '@music/_services/gaService';\nimport { GenreLabelList } from '@music/components/stateless/GenreLabel';\nimport { SoundWaves } from '@music/components/SoundWaves';\n\ntype MixDetailFullProps = IMixDetailProps & RouteComponentProps & IQuickPlayHoc;\n\ninterface IMixDetailProps {\n  player: MainMixType;\n  series: EntityCollection;\n  genres: IGenre[];\n  container: IKeyValueObject[];\n  currentTrack: ITrackCue|undefined;\n  prepareMix: (mix: IMix, addToContainer: boolean, cb: (mix: IMix) => any) => any;\n  setMainMix: (mix: MainMixType) => any;\n}\n\ninterface IMixDetailState {\n  currentSeries: ISeries|null|undefined;\n  mix: IMix\n}\n\nclass MixDetail extends React.Component<MixDetailFullProps, IMixDetailState> {\n  public state: Readonly<IMixDetailState> = {\n    currentSeries: null,\n    mix: {} as IMix\n  };\n\n  constructor(props: MixDetailFullProps) {\n    super(props);\n  }\n\n  get container(): EntityCollection {\n    return new EntityCollection(this.props.container);\n  }\n\n  get mix(): IMix|null {\n    return this.state.mix;\n  }\n\n  get current(): IKeyValueObject {\n    return this.props.currentTrack || {};\n  }\n\n  get trackName(): string {\n    return get('track.name', this.current, '-');\n  }\n\n  get orderNumber(): string {\n    return get('orderNumber', this.current);\n  }\n\n  public componentDidMount() {\n    const { slug, count } = this.props.match.params as IKeyValueObject;\n    const currentSeries = this.props.series.find(slug, 'slug') as ISeries;\n    this.setState({ currentSeries }, () => gaService.pageView(`Mix Detail: ${currentSeries.name} #${count}`));\n  }\n\n  public componentDidUpdate() {\n    const { count } = this.props.match.params as IKeyValueObject;\n    const series = this.state.currentSeries || {} as IMix;\n    const mix = this.container.where({seriesId: series.id, count: parseInt(count)}).first() as IMix;\n\n    if (mix && !has('cues.0.track', this.state.mix)) {\n      this.props.prepareMix({...mix}, true, (prepared) => {\n        this.setState({mix: prepared});\n      });\n    }\n  }\n\n  public render() {\n    return !this.state.currentSeries  ? null : (\n      <div id=\"mix-detail-container\">\n        <SidebarComponent>\n          {(!!this.mix && this.mix.count) &&\n            <Segment style={{backgroundImage: `url(${this.mix.cover || '/pictures/cover-bg.jpeg'})`, height: isMobile() ? '100vh' : '500px'}} className=\"wide-cover\">\n              <>\n                <br />\n                <Segment basic>\n                  <Header as=\"h1\">{this.state.currentSeries.name} #{this.mix.count}</Header>\n                  <Header as=\"h3\">{this.mix.description}</Header>\n                  <div className=\"genre-list\">\n                    <GenreLabelList\n                      genres={this.props.genres}\n                      mixGenres={this.mix.genres || []}\n                      labelProps={{basic: false, size: 'medium'}}\n                    />\n                  </div>\n                  <div className=\"play-button\">\n                    <PlayButton\n                      mix={this.mix}\n                      {...this.props}\n                      play={this.props.play}\n                      pause={this.props.pause}\n                      current={this.props.player}\n                      series={this.props.series.first()}\n                    />\n                  </div>\n                  {this.props.player.playing && <SoundWaves active /> }\n                  {this.trackName.length > 1 && <Header as=\"h4\">{this.orderNumber}. {this.trackName}</Header>}\n                </Segment>\n                </>\n              </Segment>\n            }\n            <Container>\n              {(!!this.mix && this.mix.cues) &&\n                <TrackListBody\n                  cues={this.mix.cues}\n                  isPlaying={this.props.player.playing}\n                  currentTrack={this.props.currentTrack}\n                />\n              }\n            </Container>\n        </SidebarComponent>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: CallableFunction) => {\n  return {\n    setMainMix: (mix: MainMixType) => dispatch(setMainMix({...mix})),\n    prepareMix: (mix: IMix, addToContainer: boolean, cb: (mix: IMix) => any) => dispatch(prepareMix(mix, addToContainer, cb)),\n  }\n};\n\nconst mapStateToProps = (state: IState) => {\n  return {\n    player: state.player,\n    container: [...state.mixContainer.data],\n    series: new EntityCollection(state.series.data),\n    genres: [...state.genres.data],\n    currentTrack: Object.keys(state.currentTrack).length > 0 ? {...state.currentTrack} : undefined,\n  }\n};\n\nconst MixDetailPage = withRouter(connect(mapStateToProps, mapDispatchToProps)(MixDetailHoc(MixDetail)) as any);\n\nexport default MixDetailPage;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/mix/DetailPage.tsx","import * as React from 'react';\n\nexport default function MixDetailHoc(WrappedComponent: any) {\n  return class extends React.Component<any, any> {\n    constructor(props: any) {\n      super(props);\n      this.state = {};\n    }\n\n    public render() {\n      return (\n        <WrappedComponent {...this.props} {...this.state} />\n      );\n    }\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/hocs/mix/DetailHoc.tsx","import * as React from 'react';\nimport { IMix, MainMixType, ISeries } from '../../interfaces';\nimport { Loader, Button } from 'semantic-ui-react';\nimport PlayButtonHoc from '../../hocs/PlayButtonHoc';\nimport QuickPlayHoc from '@music/hocs/QuickPlayHoc';\n\ninterface IPlayButtonProps {\n  setPlayerState: (mix: IMix) => any;\n  isLoading: boolean;\n  isSame: boolean;\n  mix: IMix;\n  current: MainMixType;\n  series: ISeries;\n}\n\nfunction PlayButton({setPlayerState, isLoading, isSame, mix, series}: IPlayButtonProps) {\n  return (\n    <>\n    {isLoading && <Loader inline active size='mini' />}\n    {!isLoading &&\n      <Button\n        circular\n        size=\"big\"\n        icon={(isSame ? 'pause' : 'play')}\n        onClick={() => setPlayerState(mix)}\n      />\n    }\n    </>\n  )\n}\n\nexport default QuickPlayHoc(PlayButtonHoc(PlayButton));\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/stateless/PlayButtonVar2.tsx"],"sourceRoot":""}