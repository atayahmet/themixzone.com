{"version":3,"sources":["pages/mix/DetailPage.tsx","hocs/mix/DetailHoc.tsx","components/stateless/PlayButtonVar2.tsx","_services/gaService.ts"],"names":["MixDetail","_super","props","_this","call","this","state","currentSeries","mix","__WEBPACK_IMPORTED_MODULE_0_tslib__","Object","defineProperty","prototype","__WEBPACK_IMPORTED_MODULE_9__music_extensions_entity_collection__","container","componentDidMount","slug","match","params","series","find","setState","__WEBPACK_IMPORTED_MODULE_13__music_services_gaService__","pageView","componentDidUpdate","count","where","seriesId","id","parseInt","first","__WEBPACK_IMPORTED_MODULE_5__music_utils__","prepareMix","prepared","render","__WEBPACK_IMPORTED_MODULE_1_react__","__WEBPACK_IMPORTED_MODULE_7__layouts_Sidebar__","__WEBPACK_IMPORTED_MODULE_3_semantic_ui_react__","style","backgroundImage","cover","height","className","as","name","description","__WEBPACK_IMPORTED_MODULE_12__music_components_stateless_PlayButtonVar2__","play","pause","current","player","cues","__WEBPACK_IMPORTED_MODULE_10__music_components_stateless_TrackListBody__","isPlaying","playing","currentTrack","MixDetailPage","__WEBPACK_IMPORTED_MODULE_4_react_router_dom__","__WEBPACK_IMPORTED_MODULE_2_react_redux__","mixContainer","data","slice","keys","length","undefined","dispatch","setMainMix","__WEBPACK_IMPORTED_MODULE_11__music_actions_player__","addToContainer","cb","__WEBPACK_IMPORTED_MODULE_6__music_actions_mix__","__WEBPACK_IMPORTED_MODULE_8__music_hocs_mix_DetailHoc__","__webpack_exports__","WrappedComponent","class_1","__WEBPACK_IMPORTED_MODULE_0_react__","__webpack_require__","__WEBPACK_IMPORTED_MODULE_1_semantic_ui_react__","n","__WEBPACK_IMPORTED_MODULE_2__hocs_PlayButtonHoc__","__WEBPACK_IMPORTED_MODULE_3__music_hocs_QuickPlayHoc__","_a","setPlayerState","isLoading","isSame","inline","active","size","circular","icon","onClick","__WEBPACK_IMPORTED_MODULE_0__music_initializer__","GaService","channel","create","start","add","label","tag","handler","args","gaPageView"],"mappings":"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","file":"static/js/0.6460cc2c.chunk.js","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Segment, Header, Container } from 'semantic-ui-react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { has } from '@music/utils';\nimport { prepareMix } from '@music/actions/mix';\nimport SidebarComponent from '../../layouts/Sidebar';\nimport MixDetailHoc from '@music/hocs/mix/DetailHoc';\nimport EntityCollection from '@music/extensions/entity-collection';\nimport TrackListBody from '@music/components/stateless/TrackListBody';\nimport { IState, IKeyValueObject, ISeries, IMix, ITrackCue, MainMixType } from '@music/interfaces';\nimport { setMainMix } from '@music/actions/player';\nimport { IQuickPlayHoc } from '@music/hocs/QuickPlayHoc';\nimport PlayButton from '@music/components/stateless/PlayButtonVar2';\nimport gaService from '@music/_services/gaService';\n\ntype MixDetailFullProps = IMixDetailProps & RouteComponentProps & IQuickPlayHoc;\n\ninterface IMixDetailProps {\n  player: MainMixType;\n  series: EntityCollection;\n  container: IKeyValueObject[];\n  currentTrack: ITrackCue|undefined;\n  prepareMix: (mix: IMix, addToContainer: boolean, cb: (mix: IMix) => any) => any;\n  setMainMix: (mix: MainMixType) => any;\n}\n\ninterface IMixDetailState {\n  currentSeries: ISeries|null|undefined;\n  mix: IMix\n}\n\nclass MixDetail extends React.Component<MixDetailFullProps, IMixDetailState> {\n  public state: Readonly<IMixDetailState> = {\n    currentSeries: null,\n    mix: {} as IMix\n  };\n\n  constructor(props: MixDetailFullProps) {\n    super(props);\n  }\n\n  get container(): EntityCollection {\n    return new EntityCollection(this.props.container);\n  }\n\n  get mix(): IMix|null {\n    return this.state.mix;\n  }\n\n  public componentDidMount() {\n    const { slug } = this.props.match.params as IKeyValueObject;\n    const currentSeries = this.props.series.find(slug, 'slug') as ISeries;\n    this.setState({ currentSeries }, () => gaService.pageView('Mix Detail'));\n  }\n\n  public componentDidUpdate() {\n    const { count } = this.props.match.params as IKeyValueObject;\n    const series = this.state.currentSeries || {} as IMix;\n    const mix = this.container.where({seriesId: series.id, count: parseInt(count)}).first() as IMix;\n\n    if (mix && !has('cues.0.track', this.state.mix)) {\n      this.props.prepareMix({...mix}, true, (prepared) => {\n        this.setState({mix: prepared});\n      });\n    }\n  }\n\n  public render() {\n    return !this.state.currentSeries  ? null : (\n      <>\n        <SidebarComponent>\n          {(!!this.mix && this.mix.count) &&\n          <Segment style={{backgroundImage: `url(${this.mix.cover || '/pictures/cover-bg.jpeg'})`, height: '500px'}} className=\"wide-cover\">\n            <>\n              <br />\n              <Header as=\"h1\">{this.state.currentSeries.name} #{this.mix.count}</Header>\n              <Header as=\"h3\">{this.mix.description}</Header>\n              <PlayButton\n                mix={this.mix}\n                {...this.props}\n                play={this.props.play}\n                pause={this.props.pause}\n                current={this.props.player}\n                series={this.props.series.first()}\n              />\n            </>\n          </Segment>\n          }\n          <Container>\n            {(!!this.mix && this.mix.cues) &&\n              <TrackListBody\n                cues={this.mix.cues}\n                isPlaying={this.props.player.playing}\n                currentTrack={this.props.currentTrack}\n              />\n            }\n          </Container>\n        </SidebarComponent>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: CallableFunction) => {\n  return {\n    setMainMix: (mix: MainMixType) => dispatch(setMainMix({...mix})),\n    prepareMix: (mix: IMix, addToContainer: boolean, cb: (mix: IMix) => any) => dispatch(prepareMix(mix, addToContainer, cb)),\n  }\n};\n\nconst mapStateToProps = (state: IState) => {\n  return {\n    player: state.player,\n    container: [...state.mixContainer.data],\n    series: new EntityCollection(state.series.data),\n    currentTrack: Object.keys(state.currentTrack).length > 0 ? {...state.currentTrack} : undefined,\n  }\n};\n\nconst MixDetailPage = withRouter(connect(mapStateToProps, mapDispatchToProps)(MixDetailHoc(MixDetail)) as any);\n\nexport default MixDetailPage;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/mix/DetailPage.tsx","import * as React from 'react';\n\nexport default function MixDetailHoc(WrappedComponent: any) {\n  return class extends React.Component<any, any> {\n    constructor(props: any) {\n      super(props);\n      this.state = {};\n    }\n\n    public render() {\n      return (\n        <WrappedComponent {...this.props} {...this.state} />\n      );\n    }\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/hocs/mix/DetailHoc.tsx","import * as React from 'react';\nimport { IMix, MainMixType, ISeries } from '../../interfaces';\nimport { Loader, Button } from 'semantic-ui-react';\nimport PlayButtonHoc from '../../hocs/PlayButtonHoc';\nimport QuickPlayHoc from '@music/hocs/QuickPlayHoc';\n\ninterface IPlayButtonProps {\n  setPlayerState: (mix: IMix) => any;\n  isLoading: boolean;\n  isSame: boolean;\n  mix: IMix;\n  current: MainMixType;\n  series: ISeries;\n}\n\nfunction PlayButton({setPlayerState, isLoading, isSame, mix, series}: IPlayButtonProps) {\n  return (\n    <>\n    {isLoading && <Loader inline active size='mini' />}\n    {!isLoading &&\n      <Button\n        circular\n        size=\"big\"\n        icon={(isSame ? 'pause' : 'play')}\n        onClick={() => setPlayerState(mix)}\n      />\n    }\n    </>\n  )\n}\n\nexport default QuickPlayHoc(PlayButtonHoc(PlayButton));\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/stateless/PlayButtonVar2.tsx","import { queue, ga } from \"@music/initializer\";\n\nclass GaService {\n  private channel = queue.create('page-view');\n\n  constructor() {\n    this.channel.start();\n  }\n\n  public pageView(name: string) {\n    return this.channel.add({\n      label: 'Page View',\n      tag: \"page-view\",\n      handler: 'GAWorker',\n      args: ga.gaPageView({ name }),\n    });\n  }\n}\n\nexport default new GaService;\n\n\n\n// WEBPACK FOOTER //\n// ./src/_services/gaService.ts"],"sourceRoot":""}